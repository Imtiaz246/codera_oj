basePath: /api/v1
definitions:
  auth.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - password
    type: object
  auth.UserLoginResponse:
    properties:
      AccessToken:
        type: string
      AccessTokenExpiresAt:
        type: string
      RefreshToken:
        type: string
      RefreshTokenExpiresAt:
        type: string
      User:
        $ref: '#/definitions/auth.UserResponse'
    type: object
  auth.UserRegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  auth.UserResponse:
    properties:
      city:
        type: string
      country:
        type: string
      displayName:
        type: string
      email:
        type: string
      id:
        type: integer
      image:
        type: string
      organization:
        type: string
      username:
        type: string
    type: object
  author.CreateProblemOption:
    properties:
      title:
        type: string
    required:
    - title
    type: object
  author.DiscussionOption:
    properties:
      message:
        type: string
    type: object
  author.ShareProblemOption:
    properties:
      permitType:
        $ref: '#/definitions/models.PermitType'
      shareWith:
        type: string
    type: object
  author.SolutionOption:
    properties:
      code:
        type: string
      language:
        type: string
    type: object
  author.UpdateProblemOption:
    properties:
      checkerType:
        $ref: '#/definitions/models.CheckerType'
      inputStatement:
        type: string
      memoryLimit:
        type: number
      noteStatement:
        type: string
      outputStatement:
        type: string
      statement:
        type: string
      statementsVisibilityDuringContest:
        type: boolean
      timeLimit:
        type: number
    type: object
  models.CheckerType:
    enum:
    - Default
    - String
    - Float
    - Special
    type: string
    x-enum-varnames:
    - Default
    - String
    - Float
    - Special
  models.PermitType:
    enum:
    - Author
    - Editor
    - Viewer
    - Tester
    type: string
    x-enum-varnames:
    - Author
    - Editor
    - Viewer
    - Tester
  user.UserUpdatePasswordRequest:
    properties:
      new_password:
        minLength: 6
        type: string
      old_password:
        minLength: 6
        type: string
    required:
    - new_password
    - old_password
    type: object
  user.UserUpdateRequest:
    properties:
      city:
        type: string
      country:
        type: string
      first_name:
        type: string
      image:
        type: string
      last_name:
        type: string
      organization:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber Example API
  version: "2.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: logs in a user if valid credentials given.
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/auth.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.UserLoginResponse'
      summary: Login a user.
      tags:
      - auth
  /auth/renew-token:
    get:
      consumes:
      - application/json
      description: Renew the access token using the refresh token
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      - description: refresh token
        in: query
        minLength: 1
        name: refresh-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Renew the access token
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: create account for a user.
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/auth.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: SignUp a user.
      tags:
      - auth
  /auth/verify-email/{id}/{token}:
    get:
      consumes:
      - application/json
      description: Verify email address.
      parameters:
      - description: token ID
        in: path
        name: id
        required: true
        type: string
      - description: token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Verify email address.
      tags:
      - auth
  /author/problems/:
    post:
      consumes:
      - application/json
      description: creates problem for the oj.
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/author.CreateProblemOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: creates a problem.
      tags:
      - author
  /author/problems/{id}:
    put:
      consumes:
      - application/json
      description: updates problem with the new information.
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/author.UpdateProblemOption'
      - description: problem id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: updates a problem.
      tags:
      - author
  /author/problems/{id}/:
    put:
      consumes:
      - application/json
      description: shares problem so that other user can contribute to that problem.
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/author.ShareProblemOption'
      - description: problem id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: shares a problem with other user
      tags:
      - author
  /author/problems/{id}/dataset:
    post:
      consumes:
      - application/json
      description: adds datasets(input & output file) for a problem
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/author.ShareProblemOption'
      - description: problem id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: adds dataset for a problem
      tags:
      - author
  /author/problems/{id}/discussions:
    post:
      consumes:
      - application/json
      description: adds discussion messages for a problem
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/author.DiscussionOption'
      - description: problem id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: adds discussion messages for a problem
      tags:
      - author
  /author/problems/{id}/solutions:
    post:
      consumes:
      - application/json
      description: adds solutions for a problem. Only authorized people(to whom have
        to that problem) can add solution
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/author.SolutionOption'
      - description: problem id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: adds solution for a problem
      tags:
      - author
  /users:
    put:
      consumes:
      - '*/*'
      description: Update user info
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/user.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Update a user
      tags:
      - user
  /users/{username}:
    get:
      consumes:
      - '*/*'
      description: returns a user info using username.
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get a user using username.
      tags:
      - user
  /users/password:
    put:
      consumes:
      - '*/*'
      description: updates user info
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/user.UserUpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Update user password
      tags:
      - user
swagger: "2.0"
